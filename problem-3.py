import scipy.stats as st
import numpy as np
import matplotlib.pyplot as plt
import math

# TODO ALTER THIS DATA YOURS ONES
x = [
    -0.45, -0.93, -0.90, 0.58, 2.56, -0.84, -0.01, 0.55, 1.34, -0.21, 1.06, -0.27, 0.11, 0.02, 2.07, 1.04,
    0.46, 1.04, -0.22, -2.18, 1.74, 0.90, 0.83, 8.86, 8.63, -0.47, 0.99, -0.86, -1.48, 1.23, 0.68, 0.87,
    0.87, 0.27, -0.84, -0.16, 0.95, -1.73, 0.71, -1.26, 1.50, -1.57, 0.31, 0.58, -0.66, -0.18, -1.24, -0.04, 0.13, 0.52
]

y = [
    3.91, 5.31, 4.87, 2.04, -2.43, 5.12, 2.95, 1.57, 0.30, 3.29, -0.08, 4.23, 2.15,
    2.71, -2.66, 0.27, 1.83, 1.36, 3.52, 7.10, -0.63, 0.06, 0.46, 1.03, 1.04, 3.63,
    1.09, 5.15, 6.28, 0.43, 0.53, 1.15, 0.68, 1.38, 4.37, 3.81, 0.66, 7.17, 0.84, 4.58, 0.05, 7.27,
    1.67, 1.25, 5.05, 4.25, 6.41, 2.51, 2.30, 0.96
]


##############################################################
################### PEARSON ##################################
##############################################################


def avg(array):
    """
    :param array: Массив с числами
    :return: среднее значение
    """
    return sum(array) / len(array)


def covariation(fst, sec):
    """
    Функция для подсчёта ковариации 
    
    Аналог:
        numpy.cov(x,y)[0,1] <-----> covariation(x, y)
    
    Подробнее:
        https://en.wikipedia.org/wiki/Covariance
    
    :param fst: первая случайная величина
    :param sec: вторая случайная величина
    :return: ковариация случайных велечин
    """
    avg_fst = avg(fst)
    avg_sec = avg(sec)

    sum = 0.
    for i in range(len(fst)):
        sum += ((fst[i] - avg_fst) * (sec[i] - avg_sec))
    return sum / len(fst)


def vdcv(arr):
    """
    Функция для подсчёта выборочной диперсии
    
    
    Аналог:
        numpy.cov(x,y)[0,0] <---> vdcv(x)
        numpy.cov(x,y)[1,1] <---> vdcv(y)
        
        
    Подробнее:
        https://ru.wikipedia.org/wiki/%D0%92%D1%8B%D0%B1%D0%BE%D1%80%D0%BE%D1%87%D0%BD%D0%B0%D1%8F_%D0%B4%D0%B8%D1%81%D0%BF%D0%B5%D1%80%D1%81%D0%B8%D1%8F
  
    :param arr: случайная величина(в виде массива)
    :return: выборочная дисперсия
    """
    avg_arr = avg(arr)
    sum_of_elems = 0.
    for i in range(len(arr)):
        sum_of_elems += (arr[i] - avg_arr) ** 2
    return sum_of_elems / len(arr)


def pearson(x, y):
    """
    Функция подсчёта коэфициета пирсона
    
    Аналог:
        scipy.stats.pearsonr(x, y)[0] <---->  pearson(x, y)
        
    Подробнее:
        http://www.machinelearning.ru/wiki/index.php?title=%D0%9A%D0%BE%D1%8D%D1%84%D1%84%D0%B8%D1%86%D0%B8%D0%B5%D0%BD%D1%82_%D0%BA%D0%BE%D1%80%D1%80%D0%B5%D0%BB%D1%8F%D1%86%D0%B8%D0%B8_%D0%9F%D0%B8%D1%80%D1%81%D0%BE%D0%BD%D0%B0
        
    :param x: первая случайная величина
    :param y: вторая случайная величина
    :return: коэфициент пирсона для данных велечин
    """

    cov_X_Y = covariation(x, y)
    disp_X = vdcv(x)
    disp_Y = vdcv(y)

    return cov_X_Y / (disp_X * disp_Y) ** (1 / 2)


print("Pearson coefficient is" + str(pearson(x, y)))


##############################################################
################### /PEARSON #################################
##############################################################


##############################################################
################### SPEARMAN #################################
##############################################################





##############################################################
################## /SPEARMAN #################################
##############################################################
